#----------------------------------------------------------------------
#
#  4190.308 Computer Architecture (Fall 2018)
#
#  Project #5: Optimizing Performance on a Pipelined Y86-64 Processor
#
#  December 4, 2018
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#  http://csl.snu.ac.kr
#
#----------------------------------------------------------------------

bmp_mosaic:
	# imgptr is in %rdi
	# width  is in %rsi
	# height is in %rdx
	# size 	 is in %rcx
	#-----------------------------------------------------------------

	# FILL HERE
	#stating the variables
pushq   %rbp
rrmovq    %rsp, %rbp
iaddq    $-40, %rsp
rmmovq    %rdi, -136(%rbp)
rmmovq    %rsi, -144(%rbp)
rmmovq    %rdx, -152(%rbp)
rmmovq    %rcx, -160(%rbp)

#long long horiz = 3 * width;

mrmovq    -144(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rdx, %rax
rmmovq    %rax, -96(%rbp)

##########################################################
#if((horiz) % 4 == 0)

mrmovq    -96(%rbp), %rax #horiz = rax

##andl    $3, %eax
andq   $3, %rax


jne     .L2

# p = 0;

##movq    $0, -8(%rbp)
irmovq  $0, %r8
rmmovq  %r8, -8(%rbp)

jmp     .L3

#p = (4 - horiz % 4);

.L2:
mrmovq    -96(%rbp), %rax
##cqto
##shrq    $62, %rdx


addq    %rdx, %rax
##andl    $3, %eax
subq    %rdx, %rax
##movl    $4, %edx
subq    %rax, %rdx
rrmovq    %rdx, %rax
rmmovq    %rax, -8(%rbp)

.L3:
#long long oneline =  horiz + p; //3 * width + padding byte = one line.

mrmovq    -88(%rbp), %rdx
mrmovq    -96(%rbp), %rax
addq    %rdx, %rax
rmmovq    %rax, -104(%rbp)

#for(long long i = (height - 1)*oneline ;  i >= 0 ; i -= oneline * size) {

mrmovq    -152(%rbp), %rax

##leaq    -1(%rax), %rdx
rrmovq   %rax, %rdx
iaddq   $-1, rdx

mrmovq    -104(%rbp), %rax
mulq   %rdx, %rax
rmmovq    %rax, -8(%rbp)
jmp     .L4

#for(long long j = 0 ; j < horiz ; j += 3*size) { // 너비 한 블럭씩 오른쪽으로 이동

.L19:
##movq    $0, -16(%rbp)
jmp     .L5

# long long ij = i + j

.L18:
mrmovq    -8(%rbp), %rdx
mrmovq    -16(%rbp), %rax
addq    %rdx, %rax
rmmovq    %rax, -112(%rbp)

#long long cnt = 0

##movq    $0, -24(%rbp)

#long long r = 0

##movq    $0, -32(%rbp)

#long long g = 0;

##movq    $0, -40(%rbp)

#long long b = 0;

##movq    $0, -48(%rbp)

#for(long long k = 0 ; ((k < size) && (i - k * oneline >= 0)); k++) { //현 블록 가장 아래부터, size 도달하거나 사진이 끝나거나.

##movq    $0, -56(%rbp)
jmp     .L6

#for(long long l = 0 ; ((l < size) && (j + 3*l < horiz)) ; l++) { //현 블록 가장 왼쪽부터, size 도달하거나 사진이 끝나거나.

.L11:
##movq    $0, -64(%rbp)
jmp     .L7
.L9:

#cnt++

##addq    $1, -24(%rbp)

#loca = ij - k*oneline + 3*l; //i,j 블록의 k, l 번째 원소는 전체에선 이 위치

mrmovq    -56(%rbp), %rax
#imulq   -104(%rbp), %rax
mrmovq    -112(%rbp), %rdx
rrmovq    %rdx, %rcx
subq    %rax, %rcx
mrmovq    -64(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rdx, %rax
addq    %rcx, %rax
rmmovq    %rax, -120(%rbp)

#r += imgptr[loca];

mrmovq    -120(%rbp), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
#movzbl  (%rax), %eax
#movzbl  %al, %eax
addq    %rax, -32(%rbp)

#g += imgptr[loca+1];

mrmovq    -120(%rbp), %rax
##leaq    1(%rax), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
##movzbl  (%rax), %eax
##movzbl  %al, %eax
addq    %rax, -40(%rbp)

#b += imgptr[loca+2];

mrmovq    -120(%rbp), %rax
##leaq    2(%rax), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
##movzbl  (%rax), %eax
##movzbl  %al, %eax
rmaddq    %rax, -48(%rbp)

#for(long long l = 0 ; ((l < size) && (j + 3*l < horiz)) ; l++) { //현 블록 가장 왼쪽부터, size 도달하거나 사진이 끝나거나.

##addq    $1, -64(%rbp)
.L7:
mrmovq    -64(%rbp), %rax
##cmpq    -160(%rbp), %rax
jge     .L8
mrmovq    -64(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rax, %rdx
mrmovq    -16(%rbp), %rax
addq    %rdx, %rax
##cmpq    %rax, -88(%rbp)
jg      .L9

#for(long long k = 0 ; ((k < size) && (i - k * oneline >= 0)); k++) { //현 블록 가장 아래부터, size 도달하거나 사진이 끝나거나.

.L8:
##addq    $1, -56(%rbp)
.L6:
mrmovq    -56(%rbp), %rax
##cmpq    -160(%rbp), %rax
jge     .L10
mrmovq    -56(%rbp), %rax
#imulq   -104(%rbp), %rax
mrmovq    -8(%rbp), %rdx
subq    %rax, %rdx
rrmovq    %rdx, %rax
##testq   %rax, %rax
jns     .L11

#for(long long k = 0 ; ((k < size) && (i - k * oneline >= 0)); k++) {

.L10:
##movq    $0, -72(%rbp)
jmp     .L12

#for(long long l = 0 ; ((l < size) && (j + 3*l < horiz)) ; l++) {

.L17:
##movq    $0, -80(%rbp)
jmp     .L13
.L15:

#loca = ij - k*oneline + 3*l;

mrmovq    -72(%rbp), %rax
##imulq   -104(%rbp), %rax
mrmovq    -112(%rbp), %rdx
rrmovq    %rdx, %rcx
subq    %rax, %rcx
mrmovq    -80(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rdx, %rax
addq    %rcx, %rax
rmmovq    %rax, -120(%rbp)

#imgptr[loca] = (r / cnt);

mrmovq    -32(%rbp), %rax
##cqto
##idivq   -24(%rbp)
rrmovq    %rax, %rcx
mrmovq    -120(%rbp), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
##movl    %ecx, %edx
rmmovb    %dl, (%rax)

#imgptr[loca+1] = (g / cnt);

mrmovq    -40(%rbp), %rax
##cqto
##idivq   -24(%rbp)
rrmovq    %rax, %rcx
mrmovq    -120(%rbp), %rax
##leaq    1(%rax), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
##movl    %ecx, %edx
rmmovb    %dl, (%rax)

#imgptr[loca+2] = (b / cnt);

mrmovq    -48(%rbp), %rax
##cqto
##idivq   -24(%rbp)
rrmovq    %rax, %rcx
mrmovq    -120(%rbp), %rax
##leaq    2(%rax), %rdx
mrmovq    -136(%rbp), %rax
addq    %rdx, %rax
##movl    %ecx, %edx
rmmovb    %dl, (%rax)

#for(long long l = 0 ; ((l < size) && (j + 3*l < horiz)) ; l++) {

##addq    $1, -80(%rbp)
.L13:
mrmovq    -80(%rbp), %rax
##cmpq    -160(%rbp), %rax
jge     .L14
mrmovq    -80(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rax, %rdx
mrmovq    -16(%rbp), %rax
addq    %rdx, %rax
##cmpq    %rax, -88(%rbp)
jg      .L15

#for(long long k = 0 ; ((k < size) && (i - k * oneline >= 0)); k++) {

.L14:
##addq    $1, -72(%rbp)
.L12:
mrmovq    -72(%rbp), %rax
##cmpq    -160(%rbp), %rax
jge     .L16
mrmovq    -72(%rbp), %rax
##imulq   -104(%rbp), %rax
mrmovq    -8(%rbp), %rdx
subq    %rax, %rdx
rrmovq    %rdx, %rax
##testq   %rax, %rax
jns     .L17

#for(long long j = 0 ; j < horiz ; j += 3*size) { // 너비 한 블럭씩 오른쪽으로 이동

.L16:
mrmovq    -160(%rbp), %rdx
rrmovq    %rdx, %rax
addq    %rax, %rax
addq    %rdx, %rax
##addq    %rax, -16(%rbp)
.L5:
mrmovq    -16(%rbp), %rax
##cmpq    -88(%rbp), %rax
jl      .L18

#for(long long i = (height - 1)*oneline ;  i >= 0 ; i -= oneline * size) { // 높이 한 블럭씩 위로 올라가기.

mrmovq    -104(%rbp), %rax
##imulq   -160(%rbp), %rax
##subq    %rax, -8(%rbp)
.L4:
##cmpq    $0, -8(%rbp)
jns     .L19


nop
leave
ret















	#-----------------------------------------------------------------

	ret
